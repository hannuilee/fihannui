*&---------------------------------------------------------------------*
*& Report ZRSUWON_215_02
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZRTEST_215_02.

TYPES T_CHAR(10) TYPE C.
DATA : GV_CHAR1 TYPE T_CHAR.
DATA : GV_CHAR2 LIKE GV_CHAR1.

*T_CHAR = '10'.

GV_CHAR1 = '10'.
GV_CHAR2 = '11'.

WRITE : / GV_CHAR1,
        / GV_CHAR2.

TYPES : BEGIN OF T_STRUCTURE,
         CHAR1 TYPE C LENGTH 10,
         CHAR2 TYPE C LENGTH 10,
         CHAR3 TYPE C LENGTH 10,
        END OF T_STRUCTURE.

DATA : GS_CHAR TYPE T_STRUCTURE.

GS_CHAR-CHAR1 = 'DATA'.
GS_CHAR-CHAR2 = 'CHAR'.
GS_CHAR-CHAR3 = 'TEXT'.

WRITE : / GS_CHAR.
WRITE : / GS_CHAR-CHAR1,
        / GS_CHAR-CHAR2,
        / GS_CHAR-CHAR3.

TYPES : BEGIN OF T_STRUCTURE2.
        INCLUDE TYPE T_STRUCTURE.
TYPES : CHAR4 TYPE C LENGTH 10,
        END OF T_STRUCTURE2.

DATA : GS_CHAR2 TYPE T_STRUCTURE2.

GS_CHAR2-CHAR1 = 'ABAP'.
GS_CHAR2-CHAR2 = 'PROGRAM'.
GS_CHAR2-CHAR3 = 'ABAB'.
GS_CHAR2-CHAR4 = 'CDCD'.

WRITE : / GS_CHAR2.
WRITE : / GS_CHAR2-CHAR1,
        / GS_CHAR2-CHAR2,
        / GS_CHAR2-CHAR3,
        / GS_CHAR2-CHAR4.

"INCLUDE STRUCTURE로 하면 없다고 나온다
*TYPES : BEGIN OF T_STRUCTURE3.
*             INCLUDE STRUCTURE T_STRUCTURE.
*TYPES : CHAR4 TYPE C LENGTH 10,
*             END OF T_STRUCTURE3.

DATA : BEGIN OF GS_DATA,
        CHAR1(10),
        CHAR2(10),
        CHAR3(10),
       END OF GS_DATA.

DATA : BEGIN OF GS_DATA2.
       INCLUDE STRUCTURE GS_DATA.
DATA : CHAR4(10),
       END OF GS_DATA2.

GS_DATA2-CHAR1 = '123'.
GS_DATA2-CHAR2 = '456'.
GS_DATA2-CHAR3 = '789'.
GS_DATA2-CHAR4 = '999'.

WRITE : / GS_DATA2.
WRITE : / GS_DATA2-CHAR1,
        / GS_DATA2-CHAR2,
        / GS_DATA2-CHAR3,
        / GS_DATA2-CHAR4.

WRITE : / GS_DATA2-CHAR1+0(1),
        / GS_DATA2-CHAR1+1(1),
        / GS_DATA2-CHAR1+1(2),
        / GS_DATA2-CHAR1+2(1).



IF GS_DATA2-CHAR1 = GS_DATA2-CHAR2.
  WRITE : / 'SAME'.
ELSE.
  WRITE : / 'DIFFERENT'.
ENDIF.

IF GS_DATA2-CHAR1 EQ GS_DATA2-CHAR2.
  WRITE : / 'SAME'.
ELSE.
  WRITE : / 'DIFFERENT'.
ENDIF.

IF GS_DATA2-CHAR1 <> GS_DATA2-CHAR2.
  WRITE : / 'DIFFERENT'.
ELSE.
  WRITE : / 'SAME'.
ENDIF.

IF GS_DATA2-CHAR1 NE GS_DATA2-CHAR2.
  WRITE : / 'DIFFERENT'.
ELSE.
  WRITE : / 'SAME'.
ENDIF.

IF GS_DATA2-CHAR1 > GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 크다'.
ELSE.
  WRITE : / 'CHAR2가 더 크다'.
ENDIF.

IF GS_DATA2-CHAR1 GT GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 크다'.
ELSE.
  WRITE : / 'CHAR2가 더 크다'.
ENDIF.

IF GS_DATA2-CHAR1 >= GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 크거나 같다'.
ELSE.
  WRITE : / 'CHAR2가 더 크거나 같다'.
ENDIF.

IF GS_DATA2-CHAR1 GE GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 크거나 같다'.
ELSE.
  WRITE : / 'CHAR2가 더 크거나 같다'.
ENDIF.

IF GS_DATA2-CHAR1 < GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 작다'.
ELSE.
  WRITE : / 'CHAR2가 더 작다'.
ENDIF.

IF GS_DATA2-CHAR1 LT GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 작다'.
ELSE.
  WRITE : / 'CHAR2가 더 작다'.
ENDIF.

IF GS_DATA2-CHAR1 <= GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 작거나 같다'.
ELSE.
  WRITE : / 'CHAR2가 더 작거나 같다'.
ENDIF.

IF GS_DATA2-CHAR1 LE GS_DATA2-CHAR2.
  WRITE : / 'CHAR1이 더 작거나 같다'.
ELSE.
  WRITE : / 'CHAR2가 더 작거나 같다'.
ENDIF.

IF GS_DATA2-CHAR1 = '123'
AND GS_DATA2-CHAR2 = '789'.
  WRITE : / 'FIRST AND IF'.

ELSEIF GS_DATA2-CHAR1 = '123'
AND GS_DATA2-CHAR2 = '456'.
  WRITE : / 'SECOND AND IF'.
ENDIF.

IF GS_DATA2-CHAR1 = '123'
OR GS_DATA2-CHAR2 = '789'.
  WRITE : / 'FIRST AND IF'.

ELSEIF GS_DATA2-CHAR1 = '123'
OR GS_DATA2-CHAR2 = '456'.
  WRITE : / 'SECOND AND IF'.
ENDIF.

IF ( GS_DATA2-CHAR1 = '123'
  AND GS_DATA2-CHAR2 = '789' )
OR ( GS_DATA2-CHAR1 = '123'
  AND GS_DATA2-CHAR2 = '456' ).
  WRITE : / 'FIRST AND IF'.
ELSE.
  WRITE : / 'SECOND AND IF'.
ENDIF.

GS_DATA2-CHAR4 = '789'.

CASE GS_DATA2-CHAR3.
  WHEN GS_DATA2-CHAR1.
    WRITE : / 'GS_DATA1-CHAR1'.
  WHEN GS_DATA2-CHAR2.
    WRITE : / 'GS_DATA1-CHAR2'.
  WHEN GS_DATA2-CHAR4.
    WRITE : / 'GS_DATA1-CHAR4'.
ENDCASE.

DATA : BEGIN OF GS_DATA3,
        CHAR1(10),
        CHAR2(10),
        CHAR3(10),
        CHAR4(10),
       END OF GS_DATA3.

DATA : BEGIN OF GS_DATA4,
        CHAR1(10),
        CHAR2(10),
        CHAR3(10),
        CHAR4(10),
       END OF GS_DATA4.

GS_DATA3-CHAR1 = 'CHAR1'.
GS_DATA3-CHAR2 = 'CHAR2'.
GS_DATA3-CHAR3 = 'CHAR3'.
GS_DATA3-CHAR4 = 'CHAR4'.

GS_DATA4-CHAR1 = GS_DATA3-CHAR1.
GS_DATA4-CHAR2 = GS_DATA3-CHAR2.
GS_DATA4-CHAR3 = GS_DATA3-CHAR3.
GS_DATA4-CHAR4 = GS_DATA3-CHAR4.

WRITE : / GS_DATA3,
        / GS_DATA4.

CLEAR : GS_DATA4.
MOVE GS_DATA3 TO GS_DATA4.

WRITE : / GS_DATA3,
        / GS_DATA4.

DATA : BEGIN OF GS_DATA5,
        CHAR5(10),
        CHAR6(10),
        CHAR7(10),
        CHAR8(10),
       END OF GS_DATA5.

DATA : BEGIN OF GS_DATA6,
        CHAR8(10),
        CHAR7(10),
        CHAR6(10),
        CHAR5(10),
       END OF GS_DATA6.

GS_DATA5-CHAR5 = 'CHAR5'.
GS_DATA5-CHAR6 = 'CHAR6'.
GS_DATA5-CHAR7 = 'CHAR7'.
GS_DATA5-CHAR8 = 'CHAR8'.

MOVE GS_DATA5 TO GS_DATA6.
WRITE : / GS_DATA5,
        / GS_DATA6.

CLEAR : GS_DATA6.
MOVE-CORRESPONDING GS_DATA5 TO GS_DATA6.
WRITE : / GS_DATA5,
        / GS_DATA6.

DATA : BEGIN OF GS_DATA7,
        CHAR5(10),
        CHAR6(10),
        CHAR7(10),
        CHAR8(10),
       END OF GS_DATA7.

DATA : BEGIN OF GS_DATA8,
        CH5(10),
        CH6(10),
        CHAR7(10),
        CH8(10),
       END OF GS_DATA8.

GS_DATA7-CHAR5 = 'CHAR5'.
GS_DATA7-CHAR6 = 'CHAR6'.
GS_DATA7-CHAR7 = 'CHAR7'.
GS_DATA7-CHAR8 = 'CHAR8'.

MOVE GS_DATA7 TO GS_DATA8.
WRITE : / GS_DATA7,
        / GS_DATA8.

WRITE : /, /.
CLEAR : GS_DATA8.
MOVE-CORRESPONDING GS_DATA7 TO GS_DATA8.
WRITE : / GS_DATA7,
        / GS_DATA8.
