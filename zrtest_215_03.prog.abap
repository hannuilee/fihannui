*&---------------------------------------------------------------------*
*& Report ZRSUWON_215_03
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZRTEST_215_03.

*INSERT GS_DATA INTO TABLE GT_DATA.         "KEY
*INSERT GS_DATA INTO       GT_DATA INDEX 2.
*
*APPEND GS_DATA TO GT_DATA.
*
*COLLECT GS_DATA INTO GT_DATA.
*
*MODIFY TABLE GT_DATA FROM GS_DATA.                "KEY
*MODIFY       GT_DATA FROM GS_DATA TRANSPORTING F1.
*MODIFY       GT_DATA FROM GS_DATA INDEX SY-TABIX. "LOOP 안에서
*
*DELETE TABLE GT_DATA FROM GS_DATA.                "KEY
*DELETE       GT_DATA               WHERE F1 = 'AAA'.
*DELETE       GT_DATA               INDEX 2.
*
*READ TABLE GT_DATA INTO GS_DATA WITH KEY F1 = 'AAA'. "KEY

TYPES : BEGIN OF TY_DATA1,
         CHAR1(10),
         CHAR2(10),
         CHAR3(10),
        END OF TY_DATA1.

DATA : GT_DATA1 TYPE TABLE OF TY_DATA1 WITH HEADER LINE.

GT_DATA1-CHAR1 = 'AAA'.
GT_DATA1-CHAR2 = 'BBB'.
GT_DATA1-CHAR3 = 'CCC'.
APPEND GT_DATA1.

LOOP AT GT_DATA1.
  WRITE : / GT_DATA1.
ENDLOOP.

*CL_DEMO_OUTPUT=>DISPLAY( GT_DATA1 ).

DATA : BEGIN OF GS_DATA2,
        CHAR1(10),
        CHAR2(10),
        CHAR3(10),
       END OF GS_DATA2.

DATA : GT_DATA2 LIKE TABLE OF GS_DATA2 WITH HEADER LINE.

GT_DATA2-CHAR1 = 'AAA'.
GT_DATA2-CHAR2 = 'BBB'.
GT_DATA2-CHAR3 = 'CCC'.
APPEND GT_DATA2.

LOOP AT GT_DATA2.
  WRITE : / GT_DATA2.
ENDLOOP.

*CL_DEMO_OUTPUT=>DISPLAY( GT_DATA1 ).

TYPES : BEGIN OF TY_DATA3,
         CHAR1(10),
         CHAR2(10),
         CHAR3(10),
        END OF TY_DATA3.

DATA : GT_DATA3 TYPE TABLE OF TY_DATA3.
DATA : GS_DATA3 LIKE LINE OF GT_DATA3.

DO 3 TIMES.

  GS_DATA3-CHAR1 = GS_DATA3-CHAR1 + 1.
  GS_DATA3-CHAR2 = GS_DATA3-CHAR2 + 2.
  GS_DATA3-CHAR3 = GS_DATA3-CHAR3 + 3.
  APPEND GS_DATA3 TO GT_DATA3.

ENDDO.

LOOP AT GT_DATA3 INTO GS_DATA3.
  WRITE : / GS_DATA3.
ENDLOOP.

DATA : BEGIN OF GS_DATA4,
        CHAR1(10),
        CHAR2(10),
        CHAR3(10),
       END OF GS_DATA4.

*DATA : GT_DATA4 LIKE TABLE OF GS_DATA4 WITH HEADER LINE.
DATA : GT_DATA4 LIKE GS_DATA4 OCCURS 0 WITH HEADER LINE.

GT_DATA4-CHAR1 = '111'.
GT_DATA4-CHAR2 = '222'.
GT_DATA4-CHAR3 = '333'.
INSERT TABLE GT_DATA4.
INSERT GT_DATA4 INTO TABLE GT_DATA4.


GT_DATA4-CHAR1 = '444'.
GT_DATA4-CHAR2 = '555'.
GT_DATA4-CHAR3 = '666'.
INSERT TABLE GT_DATA4.

READ TABLE GT_DATA4 INDEX 2.

WRITE : / GT_DATA4.

DATA : BEGIN OF GT_DATA5 OCCURS 0,
        CHAR1(10),
        CHAR2(10),
        CHAR3(10),
       END OF GT_DATA5.

DATA : GT_DATA6 LIKE GT_DATA5 OCCURS 0 WITH HEADER LINE.
DATA : GT_DATA66 LIKE GT_DATA5.

GT_DATA5-CHAR1 = '111'.
GT_DATA5-CHAR2 = '222'.
GT_DATA5-CHAR3 = '333'.
APPEND GT_DATA5.

MOVE GT_DATA5 TO GT_DATA6.
APPEND GT_DATA6.

LOOP AT GT_DATA5.
  WRITE : / GT_DATA5.
ENDLOOP.

LOOP AT GT_DATA6.
  WRITE : / GT_DATA6.
ENDLOOP.

CLEAR : GT_DATA6, GT_DATA6[].

MOVE GT_DATA5[] TO GT_DATA6[].

LOOP AT GT_DATA5.
  WRITE : / GT_DATA5.
ENDLOOP.

LOOP AT GT_DATA6.
  WRITE : / GT_DATA6.
ENDLOOP.

DATA : BEGIN OF GT_DATA7 OCCURS 0,
        CHAR1(10),
        CHAR2(10),
        CHAR3(10),
       END OF GT_DATA7.

*DATA : GS_DATA8 LIKE LINE OF GT_DATA7.
DATA : GS_DATA8 LIKE GT_DATA7.
DATA : GT_DATA8 LIKE TABLE OF GT_DATA7.

GT_DATA7-CHAR1 = 'AAA'.
GT_DATA7-CHAR2 = 'BBB'.
GT_DATA7-CHAR3 = 'CCC'.
APPEND GT_DATA7.

MOVE GT_DATA7[] TO GT_DATA8.

LOOP AT GT_DATA8 INTO GS_DATA8.
  WRITE : / GS_DATA8.
ENDLOOP.

REFRESH GT_DATA8.
FREE GT_DATA8.

CLEAR GS_DATA8.
GS_DATA8-CHAR1 = '가가가'.
GS_DATA8-CHAR2 = '나나나'.
GS_DATA8-CHAR3 = '다다다'.
APPEND GS_DATA8 TO GT_DATA8.
INSERT GS_DATA8 INTO TABLE GT_DATA8.

LOOP AT GT_DATA8 INTO GS_DATA8.
  WRITE : / GS_DATA8.
ENDLOOP.

DATA : BEGIN OF GS_DATA9,
        CHAR1,
        CHAR2,
       END OF GS_DATA9.

DATA : GT_DATA9 LIKE GS_DATA9 OCCURS 0 WITH HEADER LINE.

GS_DATA9-CHAR1 = '2'.
GS_DATA9-CHAR2 = 'A'.
APPEND GS_DATA9 TO GT_DATA9.

GS_DATA9-CHAR1 = '2'.
GS_DATA9-CHAR2 = 'B'.
INSERT GS_DATA9 INTO TABLE GT_DATA9.

GS_DATA9-CHAR1 = '1'.
GS_DATA9-CHAR2 = 'B'.
APPEND GS_DATA9 TO GT_DATA9.

GS_DATA9-CHAR1 = '1'.
GS_DATA9-CHAR2 = 'A'.
INSERT GS_DATA9 INTO TABLE GT_DATA9.

GS_DATA9-CHAR1 = '3'.
GS_DATA9-CHAR2 = 'A'.
APPEND GS_DATA9 TO GT_DATA9.

GS_DATA9-CHAR1 = '3'.
GS_DATA9-CHAR2 = 'B'.
INSERT GS_DATA9 INTO TABLE GT_DATA9.

"전체 내림차순
SORT GT_DATA9.
SORT GT_DATA9 ASCENDING.

"전체 오름차순
SORT GT_DATA9 DESCENDING.

"CHAR2만 내림차순
SORT GT_DATA9 BY CHAR2.
SORT GT_DATA9 BY CHAR2 ASCENDING.
"BY를 붙이면 앞에 있는 SORT는 먹지 않는다
SORT GT_DATA9 ASCENDING BY CHAR2.
SORT GT_DATA9 DESCENDING BY CHAR2 ASCENDING.

"첫번째 : CHAR1로 내림차순 / 두번째 : CHAR2로 오름차순
SORT GT_DATA9 BY CHAR1 ASCENDING CHAR2 DESCENDING.


WRITE : /.

DATA : BEGIN OF GT_DATA10 OCCURS 0,
        CHAR1(10),
        CHAR2(10),
       END OF GT_DATA10.

DATA : GV_CNT TYPE I.

GT_DATA10-CHAR1 = 'AAA'.
GT_DATA10-CHAR2 = 'BBB'.
APPEND GT_DATA10.

GT_DATA10-CHAR1 = 'CCC'.
GT_DATA10-CHAR2 = 'DDD'.
APPEND GT_DATA10.

DESCRIBE TABLE GT_DATA10 LINES GV_CNT.
WRITE : / 'GT_DATA10 LINES : ', GV_CNT.

DATA : BEGIN OF GS_DATA11,
        CHAR1(10),
        NUM TYPE I,
       END OF GS_DATA11.

DATA : GT_DATA11 LIKE GS_DATA11 OCCURS 0 WITH HEADER LINE.

GS_DATA11-CHAR1 = 'AAA'.
GS_DATA11-NUM = 1.
COLLECT GS_DATA11 INTO GT_DATA11.

GS_DATA11-CHAR1 = 'BBB'.
GS_DATA11-NUM = 2.
COLLECT GS_DATA11 INTO GT_DATA11.

GS_DATA11-CHAR1 = 'CCC'.
GS_DATA11-NUM = 3.
COLLECT GS_DATA11 INTO GT_DATA11.

GS_DATA11-CHAR1 = 'AAA'.
GS_DATA11-NUM = 2.
COLLECT GS_DATA11 INTO GT_DATA11.

GS_DATA11-CHAR1 = 'DDD'.
GS_DATA11-NUM = 1.
COLLECT GS_DATA11 INTO GT_DATA11.

LOOP AT GT_DATA11 INTO GS_DATA11.
  WRITE : / GS_DATA11-CHAR1, GS_DATA11-NUM.
*  WRITE : / GS_DATA11.
ENDLOOP.

CLEAR : GT_DATA11, GT_DATA11[].

GT_DATA11-CHAR1 = 'EEE'.
GT_DATA11-NUM = 10.
COLLECT GT_DATA11.

GT_DATA11-CHAR1 = 'FFF'.
GT_DATA11-NUM = 20.
COLLECT GT_DATA11.

GT_DATA11-CHAR1 = 'GGG'.
GT_DATA11-NUM = 10.
COLLECT GT_DATA11.

GT_DATA11-CHAR1 = 'EEE'.
GT_DATA11-NUM = 30.
COLLECT GT_DATA11.

LOOP AT GT_DATA11.
  WRITE : / GT_DATA11-CHAR1, GT_DATA11-NUM.
*  WRITE : / GT_DATA11.
ENDLOOP.

"COLLECT CHAR / CHAR / INTEGER / CHAR로 테스트 해보기

DATA : BEGIN OF GT_DATA12 OCCURS 0,
        CHAR1(10),
        CHAR2(10),
        NUM TYPE I,
       END OF GT_DATA12.

DATA : GS_DATA12 LIKE GT_DATA12.

GT_DATA12-CHAR1 = 'AAA'.
GT_DATA12-CHAR2 = '111'.
GT_DATA12-NUM = 1.
APPEND GT_DATA12.

GT_DATA12-CHAR1 = 'BBB'.
GT_DATA12-CHAR2 = '222'.
GT_DATA12-NUM = 2.
APPEND GT_DATA12.

GS_DATA12-CHAR1 = 'AAA'.
GS_DATA12-CHAR2 = '111'.
GS_DATA12-NUM = 3.
MODIFY TABLE GT_DATA12 FROM GS_DATA12.

LOOP AT GT_DATA12.
  WRITE : / GT_DATA12-CHAR1,
          / GT_DATA12-CHAR2,
          / GT_DATA12-NUM.
ENDLOOP.

DATA : BEGIN OF GS_DATA13,
        CHAR1(10),
        CHAR2(10),
       END OF GS_DATA13.

DATA : BEGIN OF GT_DATA13 OCCURS 0.
           INCLUDE STRUCTURE GS_DATA13.
DATA : NUM1 TYPE I,
       NUM2 TYPE I,
       END OF GT_DATA13.

CLEAR : GT_DATA13.
GT_DATA13-CHAR1 = 'AAA'.
GT_DATA13-CHAR2 = '111'.
GT_DATA13-NUM1 = 1.
GT_DATA13-NUM2 = 2.
APPEND GT_DATA13.

CLEAR : GT_DATA13.
*GT_DATA13-CHAR1 = ''.
*GT_DATA13-CHAR2 = ''.
GT_DATA13-NUM1 = 3.
GT_DATA13-NUM2 = 4.
APPEND GT_DATA13.

CLEAR : GT_DATA13.
GT_DATA13-CHAR1 = 'BBB'.
GT_DATA13-CHAR2 = '222'.
GT_DATA13-NUM1 = 3.
GT_DATA13-NUM2 = 4.
APPEND GT_DATA13.

CLEAR : GT_DATA13.
GT_DATA13-CHAR1 = 'AAA'.
GT_DATA13-CHAR2 = '111'.
GT_DATA13-NUM1 = 10.
GT_DATA13-NUM2 = 20.

MODIFY TABLE GT_DATA13 FROM GT_DATA13 TRANSPORTING NUM2.
MODIFY TABLE GT_DATA13 TRANSPORTING NUM2.

LOOP AT GT_DATA13.
  WRITE : / GT_DATA13-CHAR1,
          / GT_DATA13-CHAR2,
          / GT_DATA13-NUM1,
          / GT_DATA13-NUM2.
ENDLOOP.

LOOP AT GT_DATA13.
  GT_DATA13-CHAR1 = 'CCC'.
  GT_DATA13-CHAR1 = '333'.
  GT_DATA13-NUM1 = 100.
  GT_DATA13-NUM2 = 100.

  MODIFY GT_DATA13 FROM GT_DATA13 INDEX SY-TABIX.
  MODIFY GT_DATA13.

  CLEAR GT_DATA13.
ENDLOOP.

LOOP AT GT_DATA13.
  WRITE : / GT_DATA13-CHAR1,
          / GT_DATA13-CHAR2,
          / GT_DATA13-NUM1,
          / GT_DATA13-NUM2.
ENDLOOP.

DATA : BEGIN OF GT_DATA14 OCCURS 0,
        CHAR1(10),
        CHAR2(10),
       END OF GT_DATA14.

DATA : GS_DATA14 LIKE GT_DATA14.

CLEAR : GT_DATA14.
GT_DATA14-CHAR1 = 'AAA'.
GT_DATA14-CHAR2 = '111'.
APPEND GT_DATA14.

CLEAR : GT_DATA14.
GT_DATA14-CHAR1 = 'BBB'.
GT_DATA14-CHAR2 = '222'.
APPEND GT_DATA14.

CLEAR : GT_DATA14.
GT_DATA14-CHAR1 = 'CCC'.
GT_DATA14-CHAR2 = '333'.
APPEND GT_DATA14.

CLEAR : GT_DATA14.
GT_DATA14-CHAR1 = 'CCC'.
GT_DATA14-CHAR2 = '444'.
APPEND GT_DATA14.

CLEAR : GT_DATA14.
GT_DATA14-CHAR1 = 'DDD'.
GT_DATA14-CHAR2 = '555'.
APPEND GT_DATA14.

CLEAR : GT_DATA14.
GS_DATA14-CHAR1 = 'AAA'.
GS_DATA14-CHAR2 = '111'.

DELETE TABLE GT_DATA14 FROM GS_DATA14.

LOOP AT GT_DATA14.
  WRITE : / GT_DATA14.
  CLEAR : GT_DATA14.
ENDLOOP.

DELETE GT_DATA14 WHERE CHAR1 = 'CCC'.

LOOP AT GT_DATA14.
  WRITE : / GT_DATA14.
  CLEAR : GT_DATA14.
ENDLOOP.

DELETE GT_DATA14 INDEX 1.

LOOP AT GT_DATA14.
  WRITE : / GT_DATA14.
  CLEAR : GT_DATA14.
ENDLOOP.

DATA : BEGIN OF GT_DATA15 OCCURS 0,
        CHAR1(10),
        CHAR2(10),
       END OF GT_DATA15.

CLEAR : GT_DATA15.
GT_DATA15-CHAR1 = 'AAA'.
GT_DATA15-CHAR2 = '111'.
APPEND GT_DATA15.

CLEAR : GT_DATA15.
GT_DATA15-CHAR1 = 'AAA'.
GT_DATA15-CHAR2 = '111'.
APPEND GT_DATA15.

CLEAR : GT_DATA15.
GT_DATA15-CHAR1 = 'AAA'.
GT_DATA15-CHAR2 = '222'.
APPEND GT_DATA15.

CLEAR : GT_DATA15.
GT_DATA15-CHAR1 = 'AAA'.
GT_DATA15-CHAR2 = '333'.
APPEND GT_DATA15.

DELETE ADJACENT DUPLICATES FROM GT_DATA15 COMPARING ALL FIELDS.

LOOP AT GT_DATA15.
  WRITE : / GT_DATA15.
  CLEAR : GT_DATA15.
ENDLOOP.

DELETE ADJACENT DUPLICATES FROM GT_DATA15 COMPARING CHAR1.

LOOP AT GT_DATA15.
  WRITE : / GT_DATA15.
  CLEAR : GT_DATA15.
ENDLOOP.

DATA : BEGIN OF GT_DATA16 OCCURS 0,
        CHAR1(10),
        CHAR2(10),
       END OF GT_DATA16.

DATA : GS_DATA16 LIKE GT_DATA16.

CLEAR : GT_DATA16.
GT_DATA16-CHAR1 = 'AAA'.
GT_DATA16-CHAR2 = '111'.
APPEND GT_DATA16.

CLEAR : GT_DATA16.
GT_DATA16-CHAR1 = 'BBB'.
GT_DATA16-CHAR2 = '222'.
APPEND GT_DATA16.

CLEAR : GT_DATA16.
GT_DATA16-CHAR1 = 'CCC'.
GT_DATA16-CHAR2 = '333'.
APPEND GT_DATA16.

CLEAR : GT_DATA16, GS_DATA16.
READ TABLE GT_DATA16 INTO GS_DATA16 WITH TABLE KEY CHAR1 = 'BBB'
                                                   CHAR2 = '222'.
IF SY-SUBRC = 0.
  WRITE : / GS_DATA16.
ENDIF.

CLEAR : GT_DATA16, GS_DATA16.
READ TABLE GT_DATA16 INTO GS_DATA16 WITH KEY CHAR2 = '333'.
IF SY-SUBRC = 0.
  WRITE : / GS_DATA16.
ENDIF.

CLEAR : GT_DATA16.
READ TABLE GT_DATA16 INDEX 1.
IF SY-SUBRC = 0.
  WRITE : / GT_DATA16.
ENDIF.

DATA : BEGIN OF GT_DATA17 OCCURS 0,
        CHAR1(1),
       END OF GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '1'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '2'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '3'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '4'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '5'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '6'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '7'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '8'.
APPEND GT_DATA17.

CLEAR : GT_DATA17.
GT_DATA17-CHAR1 = '9'.
APPEND GT_DATA17.

READ TABLE GT_DATA17 WITH KEY CHAR1 = '7' BINARY SEARCH.
IF SY-SUBRC = 0.
  WRITE : / GT_DATA17.
ENDIF.

"AT FIRST : 인터널 테이블의 첫번째 값이 실행될 때 수행된다
"AT NEW F1 : 칼럼 F1에 새로운 값이 들어올 때 수행된다
"AT END OF F1 : 칼럼 F1의 값이 마지막일 때 수행된다
"AT LAST : 인터널 테이블의 마지막 값이 실행될 때 수행된다

DATA : BEGIN OF GT_DATA18 OCCURS 0,
        CHAR1(10),
        NUM TYPE I,
       END OF GT_DATA18.

DATA : GT_DATA19 LIKE GT_DATA18 OCCURS 0 WITH HEADER LINE.
DATA : LV_NUM TYPE I.

DO 3 TIMES.
  LV_NUM = LV_NUM + 1.
  GT_DATA18-CHAR1 = 'AAA'.
  GT_DATA18-NUM = LV_NUM.
  APPEND GT_DATA18.
ENDDO.

DO 3 TIMES.
  LV_NUM = LV_NUM + 1.
  GT_DATA18-CHAR1 = 'BBB'.
  GT_DATA18-NUM = LV_NUM.
  APPEND GT_DATA18.
ENDDO.

DO 3 TIMES.
  LV_NUM = LV_NUM + 1.
  GT_DATA18-CHAR1 = 'CCC'.
  GT_DATA18-NUM = LV_NUM.
  APPEND GT_DATA18.
ENDDO.

CL_DEMO_OUTPUT=>DISPLAY( GT_DATA18[] ).

DATA : LV_CHAR1 LIKE GT_DATA18-CHAR1,
       LV_SUM TYPE I.

LOOP AT GT_DATA18.
  IF LV_CHAR1 IS INITIAL.
    LV_CHAR1 = GT_DATA18-CHAR1.
  ENDIF.

  "SUM DATA 만들기
  IF LV_CHAR1 <> GT_DATA18-CHAR1.
    GT_DATA19-CHAR1 = LV_CHAR1.
    GT_DATA19-NUM = LV_SUM.
    APPEND GT_DATA19.
    CLEAR : GT_DATA19, LV_SUM.
  ENDIF.

  GT_DATA19-CHAR1 = GT_DATA18-CHAR1.
  GT_DATA19-NUM = GT_DATA18-NUM.
  APPEND GT_DATA19.

  LV_CHAR1 = GT_DATA18-CHAR1.
  LV_SUM = LV_SUM + GT_DATA18-NUM.

  CLEAR : GT_DATA18, GT_DATA19.
ENDLOOP.

GT_DATA19-CHAR1 = LV_CHAR1.
GT_DATA19-NUM = LV_SUM.
APPEND GT_DATA19.

CL_DEMO_OUTPUT=>DISPLAY( GT_DATA19[] ).

DATA : BEGIN OF GT_DATA20 OCCURS 0,
        CHAR1(10),
        NUM TYPE I,
       END OF GT_DATA20.

CLEAR : LV_SUM.

LOOP AT GT_DATA18.
  MOVE GT_DATA18 TO GT_DATA20.
  APPEND GT_DATA20.
  CLEAR GT_DATA20.
  LV_SUM = LV_SUM + GT_DATA18-NUM.

  AT END OF CHAR1.
    GT_DATA20-CHAR1 = GT_DATA18-CHAR1.
    GT_DATA20-NUM = LV_SUM.
    APPEND GT_DATA20.
    CLEAR : GT_DATA20, LV_SUM.
  ENDAT.

  CLEAR : GT_DATA18.
ENDLOOP.

CL_DEMO_OUTPUT=>DISPLAY( GT_DATA20[] ).

DATA : BEGIN OF GT_DATA21 OCCURS 0,
        CHAR1(10),
        NUM TYPE I,
       END OF GT_DATA21.

CLEAR : LV_SUM.

LOOP AT GT_DATA18.
  MOVE GT_DATA18 TO GT_DATA21.
  APPEND GT_DATA21.
  CLEAR GT_DATA21.

  LV_SUM = LV_SUM + GT_DATA18-NUM.

  AT LAST.
    GT_DATA21-CHAR1 = 'SUM'.
    GT_DATA21-NUM = LV_SUM.
    APPEND GT_DATA21.
    CLEAR : GT_DATA21, LV_SUM.
  ENDAT.

  CLEAR : GT_DATA18.
ENDLOOP.

CL_DEMO_OUTPUT=>DISPLAY( GT_DATA21[] ).

DATA : BEGIN OF GT_DATA22 OCCURS 0,
        CHAR1(10),
        NUM TYPE I,
       END OF GT_DATA22.

CLEAR : LV_SUM.

LOOP AT GT_DATA18.
  AT NEW CHAR1.
    GT_DATA22-CHAR1 = GT_DATA18-CHAR1.
    GT_DATA22-NUM = 123.
    APPEND GT_DATA22.
    CLEAR GT_DATA22.
  ENDAT.

  MOVE GT_DATA18 TO GT_DATA22.
  APPEND GT_DATA22.
  CLEAR GT_DATA22.

  CLEAR : GT_DATA18.
ENDLOOP.

CL_DEMO_OUTPUT=>DISPLAY( GT_DATA22[] ).

DATA : BEGIN OF GT_DATA23 OCCURS 0,
        CHAR1(10),
        NUM TYPE I,
       END OF GT_DATA23.

CLEAR : LV_SUM.

LOOP AT GT_DATA18.
  AT FIRST.
    GT_DATA23-CHAR1 = 'FISRT'.
    GT_DATA23-NUM = 111.
    APPEND GT_DATA23.
    CLEAR GT_DATA23.
  ENDAT.

  MOVE GT_DATA18 TO GT_DATA23.
  APPEND GT_DATA23.
  CLEAR GT_DATA23.

  CLEAR : GT_DATA18.
ENDLOOP.

CL_DEMO_OUTPUT=>DISPLAY( GT_DATA23[] ).
